import asyncio

from mubble import Dispatch, WaiterMachine, Message, CallbackQuery
from mubble.rules import StartCommand, CallbackDataMarkup, HasText

from src.keyboards import Keyboard
from src.database import User, Business, Supplier

dp = Dispatch()
wm = WaiterMachine()


@dp.message(StartCommand())
async def start(message: Message):
    await message.answer(
        f"üí∏ {message.from_user.first_name}\, *Dream* –≤—ñ—Ç–∞—î —Ç–µ–±–µ\!\n"
        "–î–ª—è –ª—é–¥–µ–π\, —è–∫—ñ —Ç—ñ–ª—å–∫–∏ *–ø–æ—á–∏–Ω–∞—é—Ç—å —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ —Å–≤—ñ–π –±—ñ–∑–Ω–µ—Å*\, –∞–±–æ –≤–∂–µ *–º–∞—é—Ç—å* –π–æ–≥–æ\, —è –ø—Ä–æ—Å—Ç–æ *must have\.*",
        parse_mode="MarkdownV2"
    )
    await asyncio.sleep(1.5)

    await message.answer("üìå –ß–æ–º—É?")
    await asyncio.sleep(0.7)

    await message.answer(
        "üíº *–ü–µ—Ä–µ–≤–∞–≥–∏ –¥–ª—è –±—ñ–∑–Ω–µ—Å–º–µ–Ω—ñ–≤*\:\n"
        "‚Ä¢ –Ø –º–∞—é –ø–æ—Ç—É–∂–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è *–ø–æ—à—É–∫—É —Ç–µ–Ω–¥–µ—Ä—ñ–≤ —Ç–∞ –≥—Ä–∞–Ω—Ç—ñ–≤*\.\n"
        "‚Ä¢ –Ø –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ *–Ω–∞–¥—ñ–π–Ω–æ–≥–æ* —Ç–∞ *–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ–≥–æ* –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞\.\n"
        "‚Ä¢ –Ø –º–æ–∂—É *–ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É* –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–≤–æ—î—ó –±—ñ–∑–Ω–µ—Å\-—ñ–¥–µ—ó\.\n"
        "‚Ä¢ –Ø *–ø–µ—Ä–µ–≤—ñ—Ä—é* —Ç–≤–æ—ó —ñ–¥–µ—ó –Ω–∞ *—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å* —Ç–∞ *–¥–æ–ø–æ–º–æ–∂—É* —Ä–æ–∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–∞—Ç–æ—Ä—Å—å–∫—É —ñ–¥–µ—é\.",
        parse_mode="MarkdownV2"
    )
    await asyncio.sleep(10)

    await message.answer(
        "üì¶ *–ü–µ—Ä–µ–≤–∞–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤*\:\n"
        "‚Ä¢ –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ *–∑–Ω–∞–π—Ç–∏ –Ω–∞–¥—ñ–π–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞*\, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ç–≤–æ—ó —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏\.\n"
        "‚Ä¢ –Ø –Ω–∞–¥–∞–º –¥–æ—Å—Ç—É–ø –¥–æ *—à–∏—Ä–æ–∫–æ—ó –±–∞–∑–∏ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤*\, —è–∫—ñ —à—É–∫–∞—é—Ç—å —Ç–≤–æ—ó —Ç–æ–≤–∞—Ä–∏\.\n"
        "‚Ä¢ –Ø –Ω–∞–¥—ñ—à–ª—é —Ç–æ–±—ñ —ñ–Ω—Å–∞–π—Ç–∏ —â–æ–¥–æ –ø–æ–ø–∏—Ç—É –Ω–∞ —Ç–≤–æ—ó —Ç–æ–≤–∞—Ä–∏\, —â–æ –¥–æ–ø–æ–º–æ–∂–µ –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ\.\n"
        "‚Ä¢ –Ø —Å—Ç–≤–æ—Ä—é –≤—Å—ñ —É–º–æ–≤–∏\, *–¥–ª—è –ø—Ä–∏—î–º–Ω–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó* –∑ —Ç–≤–æ—ó–º–∏ *–º–∞–π–±—É—Ç–Ω—ñ–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏*\.",
        parse_mode="MarkdownV2"
    )
    await asyncio.sleep(10)

    await message.answer(
        "üí° –¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ *—Ç–∏–ø –∞–∫–∞—É–Ω—Ç–∞* –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º\.",
        parse_mode="MarkdownV2",
        reply_markup=Keyboard.get_account_type,
    )


@dp.callback_query(CallbackDataMarkup("choice_<account_type>_account"))
async def choice_account_type(cq: CallbackQuery, account_type: str = None):
    types = {"business": Business, "supplier": Supplier}

    text = (
        f"üéâ –í—ñ—Ç–∞—é –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é –∞–∫–∞—É–Ω—Ç–∞ —Ç–∏–ø–∞ *{'–ë—ñ–∑–Ω–µ—Å' if account_type == 'business' else '–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫'}*\n"
    )
    await cq.ctx_api.send_message(cq.message.unwrap().chat.id, text, parse_mode="MarkdownV2")
